#+title: EXPLORING CONCEPTS FOR DEVELOPMENT
#+AUTHOR:SAI GOLLAPUDI
#+DATE: [2017-04-13 THU]

* Idea #1: StudentWorld App
** Work load
+ Creation of BookMarklet (BM)
+ Creation of Highlighter Web Service (HWS)
+ Creation of UniversityWorld knowledgebase
    - Creation of UniversityWorld Ontology
    - Query ability on the database
    - Gathering of public data to populate the knowledge base

** EndUser Actions on Current Page
+ Here are the sequence of actions by enduser and also bookmarklet on
  a given page:
    - User chooses a random page (e.g. Virutal Lab page)... called
      Current Page (CP)
    - User loads the bookmarklet (BM) onto that page; backend work of
      our BM begins
    - BM starts; registration is offered to user; User registers (we
      gather student name, university info, degree, year,
      male/female...)
    - BM searches currently loaded page CP
    - BM sends URL of CP to a web service called Highlighter Web
      Service (HWS)
    - HWS returns the page with markup or sends only where to markup
      in the CP
    - BM highlights the CP as per HWS instructions.
    - BM exposes a UI to the enduser
    - Enduser uses the UI to click on CP with highlights. 
    - BM recommends or does some action based on what is clicked.

** Highlighter Web Service
+ Takes a URL and fetches the page contents from the web
+ Removes style, images, audio, video... etc. Processes text only
+ Does NLP processing
    - Removes stop words
    - Finds entities or complex terms
    - Gives analytics (like term frequencies)
+ Accesses UniversityWorld database to find keyword matches between CP
  words and UniversityWorld data
+ Returns words to be tagged PLUS the tagging labels (i.e. List of
  {(XPATH + word location) and markupLabel})

** UniversityWorld database
+ Is a ontology of UniversityWorld and publicly found data
    - Ontology to be defined (action item: SaiG)
    - Ontology to link University, Professors, NPTEL, Virtual Lab,
      GATE/Course Syllabus...
    - Ontology should be an .owl file 
+ The following data should be gathered from public sources on the
  web. Data to be gathered includes:
    - University info (especially NPTEL participating universities)
    - Professor info (especially from participating Universities)
    - NPTEL metadata
    - Virtual lab metadata
    - Syallabus for CSE (scope is restricted; assumption we are only
      dealing with CSE)
    - GATE syllabus for CSE
    - GATE exam questions for previous CSE
 + UniversityWorld should be a accessible database on the cloud
   (MongoDB?)
 + Database should be queriable (e.g. SPARQL)

** Ontology
+ Student is-part-of University
+ Student is-part-of degree
+ Student takes course
+ Faculty teaches course
+ Course contains material
+ Material is-type videos, text, virtual labs
+ Course has syallabus
+ Syllabus has lesson plans, topics
+ Course has pedagogy
+ Pedagogy has instructions2students, quizzes, TopicExplanations
[[images/ontology-structure.png]]
** Program Plan
+ Build a prototype by hand 
    - Find a student name, NPTEL class, Syllabus, university, prof and
      Virtual lab and show what links/associations are possible. And
      show how this is some interesting value add to conventional
      virtual lab page.

+ Highlighter Web Service
    - V0.1 - takes a url, gives out a 1) XPATH to agreed word, 2) label 
       - Word to match is "virtual"
       - Label to give is "tag-this"
    - V0.2 - gives a list of xpaths with labels
       - Words to match are "virtual, university, student"
       - Labels to give are "student, professor,..."
    - V0.3 - works with external but simple knowledge base
    - V1.0 - works with full University World knowledge base

+ BM
    - End-user Registration
    - Save End-user data, config info, ontology links, IP address for
      database on cloud...
    - UI for mouseclick by enduser
    - Should be able tag list of words with specified markup
        - Markup can be RDFa, Microformat etc.
    - Accessing web services (just one)
    - Accessing web services (different web services for different UI
      actions)

+ UniversityWorld Knowledge base
    - Creation of Ontology (*.owl file)
    - Adding data to Ontology
    - Putting it on cloud
    - Querying the database

* Idea #2: Renarration Framework
** Work for Framework includes
+ Creation of Renarration Viewer Portal (web App)
+ Creation of Renarration Studio Portal (web app)
+ Creation of Cloud Database
   
  + Structures that are needed for this framework to work include
   - Semantic Style Sheet to be designed
   - Record of info to be captured for Curator
   - Record of info to be captured for viewers

** Renarration Viewer
+ Web portal application (written in FLASK? Python)
   - User gets to our portal on the web
   - Once in the portal, user logs in. Portal grabs user (user data,
     environmental data like browser, time)
   - Viewer asks the user to enter a URL to fetch
   - User enters URL in textbox 
   - Portal checks with RenarrationTable to see if there are any
     Renarrations for that URL
   - Portal shows the user all possible alternate views
     (i.e. renarrations) that are applicable to the user
   - User chooses one of the alternatives
   - Portal, fetches the Semantic Style Sheet for that URL 
   - Portal fetches the URL and transforms it based on SSS before
     showing it to viewer. This is renarration of the source.
       - Transformation of the source DOM to target DOM is done by this
        Portal
       - Transformation includes changes to content, flow, style,
        behaviour
       - Environmental data, Viewer Data etc. to be used in
        transformation. For example, conditions can be true / false
        based on this trigger data. E.g. Time of Date, Browser used
        for viewing, ViewerName who is viewing…

** Renarration Table
+ Maps URLs to likely renarration alternatives; should also have
  descriptions for human reading.

** Semantic Style Sheet
+ Is like a conventional Style Sheet (e.g. CSS). It has source
  information that is to be transformed to target. The transformation
  should be executed only under said conditions, which are also to be
  given in the semantic style sheet.

+ Content of the SSS includes which nodes (or portions of a node) to
  be transformed into target. i.e. source DOM-> target DOM mapping has
  to happen. Changes can be at the content level, flow level, style
  level, behaviour level. By content we are thinking that CRUD
  operations on the content of a node can be done. That is, text of a
  node can be Created, Updated, Read, Deleted. The same may apply for
  video, audio, images etc.

   - Flow changes mean that DOM order in target may be different from
     DOM order in source
   - Style changes mean that color, font etc. may change in target
   - Behavior changes mean that JavaScript, Presentation or UI of the
     source/target is being impacted.
   - By changes we mean that CRUD operations can be performed. 
   - SSS should be created in the Renarration Studio.
   - SSS should contain, WHO, WHAT, WHEN, WHERE, HOW, WHY…

** Renarration Studio
+ This is a web application portal (designed using FLASK? Python).
+ This portal allows a volunteer 3rd party user e.g. curator
  /renarrator to propose changes to a given page.
+ Flow of actions
    - Curator enters the portal by giving the portal URL at the
      browser
    - App will ask curator to login / register. Portal records and
      keeps this information in cloud database.
    - UI of the app asks the curator to enter the URL for renarration
    - Curator enters the URL
    - App fetches the DOM of the source
    - App displays the source DOM in a separate Iframe
    - App provides a form for curator to enter the WHAT, WHEN, WHERE…
    - Curator looks at  the  Source DOM and enters values into the table 
    - When Submit button is pressed, the info from the table is saved
      in the Cloud database in JSON/XML form. This is what we are
      calling SSS.

** Cloud database
+ Database maybe implemented as a MongoDB type cloud DB. This contains
  the following:
    - Renarration table
    - Records of curators 
    - Records of users
    - SSS in JSON /XML forms

** Project Actions
+ DOM transformation
  - V0.1 do by hand
  - V0.2 do by JSON/ XML
  - V0.3 do by simple SSS 
  - V0.4 simple rule engine 
  - V1.0 do by complete SSS using a DROOLs type rule engine
+ SSS design
  - Using SSS as input to transform Source DOM to Target DOM
  - V0.1 play only at node level. Add/del… CRUD on nodes. SSS in v0.1
    is very simple JSON/XML sheet
  - V0.2 play within the node. CRUD within the nodes. SSS in v0.2 is
    still very simple JSON/XML sheet but has info on the content
    within the node
  - SSS 1.0 is a complete table with WHAT, WHEN… info
  - V1.0 of SSS design is that a complete SSS is used to transform
    Source DOM to Target DOM.
+Cloud Database design
