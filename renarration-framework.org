#+Title: Renarration Framework
#+Date: 13-04-2017
#+Author:

* Renarration Framework

** Work for Framework includes
+ Creation of Renarration Viewer Portal (web App)
+ Creation of Renarration Studio Portal (web app)
+ Creation of Cloud Database

*** Structures that are needed for this framework to work include
+ Semantic Style Sheet to be designed
+ Record of info to be captured for Curator
+ Record of info to be captured for viewers

** Renarration Viewer
+ Web portal application (written in FLASK? Python)
  - User gets to our portal on the web
  - Once in the portal, user logs in. Portal grabs user (user data,
    environmental data like browser, time)
  - Viewer asks the user to enter a URL to fetch
  - User enters URL in textbox 
  - Portal checks with Renarration Table to see if there are any
    Renarrations for that URL
  - Portal shows the user all possible alternate views
    (i.e. renarrations) that are applicable to the user
  - User chooses one of the alternatives
  - Portal, fetches the Semantic Style Sheet for that URL 
  - Portal fetches the URL and transforms it based on SSS before showing
    it to viewer. This is renarration of the source.
     - Transformation of the source DOM to target DOM is done by this
       Portal
     - Transformation includes changes to content, flow, style, behaviour
     - Environmental data, Viewer Data etc. to be used in
       transformation. For example, conditions can be true / false based
       on this trigger data. E.g. Time of Daty, Browser used for viewing,
       ViewerName who is viewing.

** Renarration Table
+ Maps URLs to likely renarration alternatives; should also have
  descriptions for human reading.

** Semantic Style Sheet
+ Is like a conventional Style Sheet (e.g. CSS). It has source 
  information that is to be transformed to target. The transformation
  should be executed only under said conditions, which are also to be
  given in the semantic style sheet.  

+ Content of the SSS includes which nodes (or portions of a node) to be
  transformed into target. i.e. source DOM-> target DOM mapping has to
  happen. Changes can be at the content level, flow level, style level,
  behaviour level. By content we are thinking that CRUD operations on
  the content of a node can be done. That is, text of a node can be
  Created, Updated, Read, Deleted. The same may apply for video, audio,
  images etc.  
 - Flow changes mean that DOM order in target may be different from
   DOM order in source Style changes mean that color, font
   etc. may change in target 
 - Behavior changes mean that JavaScript, Presentation or UI of the
   source/target is being impacted.
 - By changes we mean that CRUD operations can be performed.  
 - SSS should be created in the Renarration Studio.
 - SSS should contain, WHO, WHAT, WHEN, WHERE, HOW, WHY....

** Renarration Studio
+ This is a web application portal (designed using FLASK? Python).
+ This portal allows a volunteer 3rd party user e.g. curator
  /renarrator to propose changes to a given page.
+ Flow of actions
  - Curator enters the portal by giving the portal URL at the browser
  - App will ask curator to login / register. Portal records and keeps
    this information in cloud database.
  - UI of the app asks the curator to enter the URL for renarration
  - Curator enters the URL
  - App fetches the DOM of the source
  - App displays the source DOM in a separate Iframe
  - App provides a form for curator to enter the  WHAT, WHEN, WHERE....
  - Curator looks at  the  Source DOM and enters values into the table 
  - When Submit button is pressed, the info from the table is saved in
    the Cloud database in JSON/XML form. This is what we are calling
    SSS.

** Cloud database
+ Database maybe implemented as a MongoDB type cloud DB. This contains
  the following:
  - Renarration table
  - Records of curators 
  - Records of users
  - SSS in JSON /XML forms

** Project Actions
+ DOM transformation
  - V0.1 do by hand
  - V0.2 do by JSON/ XML
  - V0.3 do by simple SSS 
  - V0.4 simple rule engine 
  - V1.0 do by complete SSS using a DROOLs type rule engine

+ SSS design
  - Using SSS as input to transform Source DOM to Target DOM
  - V0.1 play only at node level. Add/del¡­ CRUD on nodes. SSS in v0.1
    is very simple JSON/XML sheet
  - V0.2 play within the node. CRUD within the nodes. SSS in v0.2 is
    still very simple JSON/XML sheet but has info on the content
    within the node
  - SSS 1.0 is a complete table with WHAT, WHEN¡­ info
  - V1.0 of SSS design is that a complete SSS is used to transform
    Source DOM to Target DOM.

+ Cloud Database design

